#
# Copyright (c) 2010-2012 Steffen Kie√ü
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

OMakeVersion(0.9.6)

open build/Common

FindFileInProjectDirectories (patterns) =
	RET[] =
	foreach (pattern, $(patterns))
		RET += $(filter-exists $(glob iFbe, $(addsuffix /$(pattern), $(project-directories) $(ROOT)/OMake $(ROOT)/local/OMake))) # Add $(ROOT)/OMake and $(ROOT)/local/OMake, even if it is not in $(project-directories)
		export
	value $(RET)
FindInProjectDirectories (patterns) =
	RET[] =
	foreach (pattern, $(patterns))
		RES = $(filter-exists $(glob ibe, $(addsuffix /$(pattern), $(project-directories) $(ROOT)/OMake $(ROOT)/local/OMake))) # Add $(ROOT)/OMake and $(ROOT)/local/OMake, even if it is not in $(project-directories)
		RET += $(foreach $(file), $(foreach $(string), $(RES))) # Workaround omake bug: "echo $(filter-exists $(dir doc))" prints "doc/." instead of "doc"
		export
	value $(RET)
FilterOutGenerated (files) =
	RET[] =
	foreach (file, $(files))
		match $(file)
		case $"lib/.*"
		case $"generated/.*"
		case $".*\.generated"
		case $".*\.generated\..*"
		case $".*\.stub"
		case $".*\.stub\..*"
		case $".*\.lin-.*"
		default
			RET += $(file)
			export
		export
	value $(RET)

.PHONY: e clean clean-tmp clean-generated

clean: clean-tmp clean-generated

clean-tmp:
	rm -f $(FindFileInProjectDirectories *~)
	/bin/rm -rf $(FindInProjectDirectories *.tmp)

clean-generated:
	/bin/rm -rf $(FindInProjectDirectories *.generated.* *.generated generated.*)

section
	e:
		section
			EmacsFilePatterns = *.in *.c *.h *.cpp *.cs *.n *.idl *.css *.as?x \
				*.pkg *.java OMakefile BUGS TODO *.tex *.sty *.hpp *.cl \
				*.sh *.py

		       	EmacsFiles = $(filter-exists OMakeroot debian/rules debian/control)
			foreach (x, $(EmacsFilePatterns))
				EmacsFiles += $(FilterOutGenerated $(FindFileInProjectDirectories $x))
				export

			$(which e) $(EmacsFiles)

.PHONY: test

Shell. +=
    protected.logcmdquiet(argv) =
	log = $(nth 0, $(argv))
	prog = $(nth-tl 1, $(argv))
	origout = $(stdout)
	origerr = $(stderr)
	log_file = $(fopen $(log), w)
	stdout = $(log_file)
	stderr = $(log_file)
	retval = $(shell-code $(prog))
	if $(not $(equal $(retval), 0))
		close ($(log_file))
		stdout = $(origout)
		stderr = $(origerr)
		eprintln($(nth 0, $(prog)) failed)
		cat $(log)
		exit 1
	stdout = $(origout)
	stderr = $(origerr)
#	cat $(log)

.PHONY: all
all: .DEFAULT

.PHONY: clean-all clean-all-status
clean-all: clean
	rm -f $(FindFileInProjectDirectories *.omc)
	rm -f $(ROOT)/.omakedb $(ROOT)/.omakedb.lock
if $(file-exists $(ROOT)/.svn)
	clean-all-status: clean-all
		svn status --no-ignore || true
elseif $(file-exists $(ROOT)/.git)
	clean-all-status: clean-all
		git clean -n -x

# Local Variables: 
# mode: Makefile-GMake
# End: 
